/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.numericalmethod;


import com.github.drstefanfriedrich.f2blib.parser.FunctionParser;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.GridLayout;
import java.util.ArrayList;
import java.util.List;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.apache.commons.math3.analysis.polynomials.PolynomialFunction;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.xy.XYItemRenderer;
import org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import org.mariuszgromada.math.mxparser.Argument;
import org.mariuszgromada.math.mxparser.Expression;
import org.mariuszgromada.math.mxparser.Function;
import org.mariuszgromada.math.mxparser.mathcollection.NumberTheory;
import org.mariuszgromada.math.mxparser.*;
import org.matheclipse.core.eval.ExprEvaluator;
import org.matheclipse.core.interfaces.IExpr;
import org.matheclipse.parser.client.Parser;
import org.matheclipse.core.expression.F;
import static org.matheclipse.core.expression.F.eval;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.script.ScriptEngine;
import javax.script.ScriptEngineManager;
import javax.script.ScriptException;
import net.objecthunter.exp4j.ExpressionBuilder;
import org.apache.commons.math3.analysis.FunctionUtils;
import org.apache.commons.math3.analysis.UnivariateFunction;
import org.apache.commons.math3.analysis.function.Sigmoid;
import org.apache.commons.math3.analysis.solvers.*;
import org.apache.commons.math3.exception.NoBracketingException;
import org.apache.commons.math3.exception.NumberIsTooLargeException;
import org.apache.commons.math3.exception.TooManyEvaluationsException;
import org.apache.commons.math3.analysis.polynomials.PolynomialFunction;
import org.apache.commons.math3.exception.MathParseException;
import org.apache.commons.math3.exception.util.LocalizedFormats;
import org.matheclipse.core.sympy.core.Expr;
public class Calculator extends javax.swing.JFrame {

    /**
     * Creates new form Calculator
     */
    private double root = 0;
    //GRAPHICAL
    private String Interval="";
    private String defaultInterval = "0.2";
    String calculate = "";
    //INCREMENTAL
    private String xChangeIncremental = "";
    //DATA ARRAY
    ArrayList<ArrayList<Object>> dataIncremental = new ArrayList<>();
    ArrayList<ArrayList<Object>> dataBisection = new ArrayList<>();
    ArrayList<ArrayList<Object>> dataFalsi = new ArrayList<>();
    ArrayList<ArrayList<Object>> dataFixedPoint = new ArrayList<>();
    ArrayList<ArrayList<Object>> dataNewtonRhapson = new ArrayList<>();
    ArrayList<ArrayList<Object>> dataSecant = new ArrayList<>();
    private double Xl=0;
    private double Xu=0;
    private double XChange = 0;
    private String calculate1 = "";
    private String calculate2 = "";
    private double x1=0;
    private double x2=0;
    private int counter = 1;
    //GENERAL EQUATION
    private String equation = "";
    private String iterations = "1000";
    private String displayIteration = "";
    private String iterationDefault = "0";
    private String display = "";
    private String operatorCount = "";
    //BUTTON SWITCH
    private int tfSwitch = 0;
    //STOPPING CRITERION
    private double stoppingCriterion = 0.0001;
    //STARTING
    private String start = "";
    //ENDING
    private String end = "";
    //BISECTION METHOD
    private double bisectionXl = 0;
    private double bisectionXu = 0;
    private double bisectionXr = 0;
    private double bisectionX1 = 0;
    private double bisectionX2=0;
    //REGULA-FALSI
    private double falsiXl = 0;
    private double falsiXu = 0;
    private double falsiXr = 0;
    private double falsiX1 = 0;
    private double falsiX2=0;
    //FIXED-POINT
    
    //NEWTON RHAPSON
    
    //SECANT 
    private double aRoot = 0;
    
    public Calculator() {
        initComponents();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        panelRound1 = new com.mycompany.numericalmethod.PanelRound();
        jLabel2 = new javax.swing.JLabel();
        panelRound2 = new com.mycompany.numericalmethod.PanelRound();
        graphicalButton = new com.mycompany.numericalmethod.Button();
        incrementalButton = new com.mycompany.numericalmethod.Button();
        bisectionButton = new com.mycompany.numericalmethod.Button();
        falsiButton = new com.mycompany.numericalmethod.Button();
        fixedButton = new com.mycompany.numericalmethod.Button();
        rhapsonButton = new com.mycompany.numericalmethod.Button();
        secantButton = new com.mycompany.numericalmethod.Button();
        jPanel2 = new javax.swing.JPanel();
        numButton = new com.mycompany.numericalmethod.Button();
        numButton1 = new com.mycompany.numericalmethod.Button();
        numButton2 = new com.mycompany.numericalmethod.Button();
        numButton3 = new com.mycompany.numericalmethod.Button();
        numButton4 = new com.mycompany.numericalmethod.Button();
        numButton5 = new com.mycompany.numericalmethod.Button();
        numButton6 = new com.mycompany.numericalmethod.Button();
        numButton7 = new com.mycompany.numericalmethod.Button();
        numButton8 = new com.mycompany.numericalmethod.Button();
        numButton9 = new com.mycompany.numericalmethod.Button();
        numButton10 = new com.mycompany.numericalmethod.Button();
        numButton11 = new com.mycompany.numericalmethod.Button();
        numButton12 = new com.mycompany.numericalmethod.Button();
        numButton13 = new com.mycompany.numericalmethod.Button();
        numButton14 = new com.mycompany.numericalmethod.Button();
        jLabel1 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        iterationField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        rootCountField = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        numButton15 = new com.mycompany.numericalmethod.Button();
        numButton16 = new com.mycompany.numericalmethod.Button();
        numButton17 = new com.mycompany.numericalmethod.Button();
        numButton18 = new com.mycompany.numericalmethod.Button();
        numButton19 = new com.mycompany.numericalmethod.Button();
        numButton20 = new com.mycompany.numericalmethod.Button();
        numButton21 = new com.mycompany.numericalmethod.Button();
        numButton22 = new com.mycompany.numericalmethod.Button();
        equationTextField = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        endTextField = new javax.swing.JTextField();
        startTextField = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        numButton27 = new com.mycompany.numericalmethod.Button();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        rootDisplay = new javax.swing.JTextField();
        numButton30 = new com.mycompany.numericalmethod.Button();
        numButton31 = new com.mycompany.numericalmethod.Button();
        numButton32 = new com.mycompany.numericalmethod.Button();
        jPanel3 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        displayTab = new javax.swing.JTabbedPane();
        panelRound4 = new com.mycompany.numericalmethod.PanelRound();
        numButton23 = new com.mycompany.numericalmethod.Button();
        jScrollPane1 = new javax.swing.JScrollPane();
        graphicalTable = new javax.swing.JTable();
        numButton24 = new com.mycompany.numericalmethod.Button();
        graphicalTextField = new javax.swing.JTextField();
        panelRound5 = new com.mycompany.numericalmethod.PanelRound();
        xChange = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        numButton25 = new com.mycompany.numericalmethod.Button();
        numButton26 = new com.mycompany.numericalmethod.Button();
        jScrollPane2 = new javax.swing.JScrollPane();
        incrementalTable = new javax.swing.JTable();
        falsiTab = new com.mycompany.numericalmethod.PanelRound();
        jScrollPane3 = new javax.swing.JScrollPane();
        bisectionTable = new javax.swing.JTable();
        numButton28 = new com.mycompany.numericalmethod.Button();
        panelRound7 = new com.mycompany.numericalmethod.PanelRound();
        jScrollPane4 = new javax.swing.JScrollPane();
        falsiTable = new javax.swing.JTable();
        numButton29 = new com.mycompany.numericalmethod.Button();
        rhapsonTab = new com.mycompany.numericalmethod.PanelRound();
        jScrollPane5 = new javax.swing.JScrollPane();
        fixedPointTable = new javax.swing.JTable();
        numButton33 = new com.mycompany.numericalmethod.Button();
        secantTab = new com.mycompany.numericalmethod.PanelRound();
        jScrollPane6 = new javax.swing.JScrollPane();
        newtonRhapsonTable = new javax.swing.JTable();
        numButton34 = new com.mycompany.numericalmethod.Button();
        panelRound3 = new com.mycompany.numericalmethod.PanelRound();
        jScrollPane7 = new javax.swing.JScrollPane();
        secantTable = new javax.swing.JTable();
        numButton35 = new com.mycompany.numericalmethod.Button();
        rootHolder = new com.mycompany.numericalmethod.PanelRound();
        jPanel4 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(27, 34, 42));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        panelRound1.setBackground(new java.awt.Color(46, 58, 74));
        panelRound1.setRoundBottomLeft(50);
        panelRound1.setRoundBottomRight(50);
        panelRound1.setRoundTopLeft(50);
        panelRound1.setRoundTopRight(50);

        jLabel2.setFont(new java.awt.Font("Yu Gothic", 1, 48)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(118, 111, 179));
        jLabel2.setText("NUMERICAL METHODS");
        jLabel2.setToolTipText("");
        jLabel2.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        jLabel2.setAlignmentY(0.2F);

        javax.swing.GroupLayout panelRound1Layout = new javax.swing.GroupLayout(panelRound1);
        panelRound1.setLayout(panelRound1Layout);
        panelRound1Layout.setHorizontalGroup(
            panelRound1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelRound1Layout.createSequentialGroup()
                .addContainerGap(293, Short.MAX_VALUE)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 571, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(226, 226, 226))
        );
        panelRound1Layout.setVerticalGroup(
            panelRound1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelRound1Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(29, Short.MAX_VALUE))
        );

        jPanel1.add(panelRound1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, 1090, 100));

        panelRound2.setBackground(new java.awt.Color(46, 58, 74));
        panelRound2.setRoundBottomLeft(50);
        panelRound2.setRoundBottomRight(50);
        panelRound2.setRoundTopLeft(50);
        panelRound2.setRoundTopRight(50);

        graphicalButton.setBackground(new java.awt.Color(66, 29, 197));
        graphicalButton.setForeground(new java.awt.Color(255, 255, 255));
        graphicalButton.setText("Graphical");
        graphicalButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                graphicalButtonActionPerformed(evt);
            }
        });

        incrementalButton.setBackground(new java.awt.Color(66, 29, 197));
        incrementalButton.setForeground(new java.awt.Color(255, 255, 255));
        incrementalButton.setText("Incremental Search");
        incrementalButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                incrementalButtonActionPerformed(evt);
            }
        });

        bisectionButton.setBackground(new java.awt.Color(66, 29, 197));
        bisectionButton.setForeground(new java.awt.Color(255, 255, 255));
        bisectionButton.setText("Bisection");
        bisectionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bisectionButtonActionPerformed(evt);
            }
        });

        falsiButton.setBackground(new java.awt.Color(66, 29, 197));
        falsiButton.setForeground(new java.awt.Color(255, 255, 255));
        falsiButton.setText("Regula-Falsi");
        falsiButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                falsiButtonActionPerformed(evt);
            }
        });

        fixedButton.setBackground(new java.awt.Color(66, 29, 197));
        fixedButton.setForeground(new java.awt.Color(255, 255, 255));
        fixedButton.setText("Fixed-Point");
        fixedButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fixedButtonActionPerformed(evt);
            }
        });

        rhapsonButton.setBackground(new java.awt.Color(66, 29, 197));
        rhapsonButton.setForeground(new java.awt.Color(255, 255, 255));
        rhapsonButton.setText("Newton Rhapson");
        rhapsonButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rhapsonButtonActionPerformed(evt);
            }
        });

        secantButton.setBackground(new java.awt.Color(66, 29, 197));
        secantButton.setForeground(new java.awt.Color(255, 255, 255));
        secantButton.setText("Secant Method");
        secantButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                secantButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelRound2Layout = new javax.swing.GroupLayout(panelRound2);
        panelRound2.setLayout(panelRound2Layout);
        panelRound2Layout.setHorizontalGroup(
            panelRound2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelRound2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelRound2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(graphicalButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(incrementalButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 158, Short.MAX_VALUE)
                    .addComponent(bisectionButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 158, Short.MAX_VALUE)
                    .addComponent(falsiButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 158, Short.MAX_VALUE)
                    .addComponent(fixedButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 158, Short.MAX_VALUE)
                    .addComponent(rhapsonButton, javax.swing.GroupLayout.DEFAULT_SIZE, 158, Short.MAX_VALUE)
                    .addComponent(secantButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 158, Short.MAX_VALUE))
                .addContainerGap())
        );
        panelRound2Layout.setVerticalGroup(
            panelRound2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelRound2Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(graphicalButton, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(incrementalButton, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bisectionButton, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(falsiButton, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(fixedButton, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rhapsonButton, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(secantButton, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(19, Short.MAX_VALUE))
        );

        jPanel1.add(panelRound2, new org.netbeans.lib.awtextra.AbsoluteConstraints(1110, 20, 170, 470));

        jPanel2.setBackground(new java.awt.Color(33, 41, 52));

        numButton.setBackground(new java.awt.Color(46, 58, 72));
        numButton.setForeground(new java.awt.Color(255, 255, 255));
        numButton.setText("9");
        numButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                numButtonActionPerformed(evt);
            }
        });

        numButton1.setBackground(new java.awt.Color(46, 58, 72));
        numButton1.setForeground(new java.awt.Color(255, 255, 255));
        numButton1.setText("8");
        numButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                numButton1ActionPerformed(evt);
            }
        });

        numButton2.setBackground(new java.awt.Color(46, 58, 72));
        numButton2.setForeground(new java.awt.Color(255, 255, 255));
        numButton2.setText("7");
        numButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                numButton2ActionPerformed(evt);
            }
        });

        numButton3.setBackground(new java.awt.Color(46, 58, 72));
        numButton3.setForeground(new java.awt.Color(255, 255, 255));
        numButton3.setText("6");
        numButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                numButton3ActionPerformed(evt);
            }
        });

        numButton4.setBackground(new java.awt.Color(46, 58, 72));
        numButton4.setForeground(new java.awt.Color(255, 255, 255));
        numButton4.setText("5");
        numButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                numButton4ActionPerformed(evt);
            }
        });

        numButton5.setBackground(new java.awt.Color(46, 58, 72));
        numButton5.setForeground(new java.awt.Color(255, 255, 255));
        numButton5.setText("4");
        numButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                numButton5ActionPerformed(evt);
            }
        });

        numButton6.setBackground(new java.awt.Color(46, 58, 72));
        numButton6.setForeground(new java.awt.Color(255, 255, 255));
        numButton6.setText("1");
        numButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                numButton6ActionPerformed(evt);
            }
        });

        numButton7.setBackground(new java.awt.Color(46, 58, 72));
        numButton7.setForeground(new java.awt.Color(255, 255, 255));
        numButton7.setText("3");
        numButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                numButton7ActionPerformed(evt);
            }
        });

        numButton8.setBackground(new java.awt.Color(46, 58, 72));
        numButton8.setForeground(new java.awt.Color(255, 255, 255));
        numButton8.setText("2");
        numButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                numButton8ActionPerformed(evt);
            }
        });

        numButton9.setBackground(new java.awt.Color(46, 58, 72));
        numButton9.setForeground(new java.awt.Color(255, 255, 255));
        numButton9.setText("+");
        numButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                numButton9ActionPerformed(evt);
            }
        });

        numButton10.setBackground(new java.awt.Color(46, 58, 72));
        numButton10.setForeground(new java.awt.Color(255, 255, 255));
        numButton10.setText("0");
        numButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                numButton10ActionPerformed(evt);
            }
        });

        numButton11.setBackground(new java.awt.Color(46, 58, 72));
        numButton11.setForeground(new java.awt.Color(255, 255, 255));
        numButton11.setText("e");
        numButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                numButton11ActionPerformed(evt);
            }
        });

        numButton12.setBackground(new java.awt.Color(46, 58, 72));
        numButton12.setForeground(new java.awt.Color(255, 255, 255));
        numButton12.setText("X");
        numButton12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                numButton12ActionPerformed(evt);
            }
        });

        numButton13.setBackground(new java.awt.Color(46, 58, 72));
        numButton13.setForeground(new java.awt.Color(255, 255, 255));
        numButton13.setText(".");
        numButton13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                numButton13ActionPerformed(evt);
            }
        });

        numButton14.setBackground(new java.awt.Color(46, 58, 72));
        numButton14.setForeground(new java.awt.Color(255, 255, 255));
        numButton14.setText("-");
        numButton14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                numButton14ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Yu Gothic", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(118, 111, 179));
        jLabel1.setText("EQUATION");
        jLabel1.setToolTipText("");
        jLabel1.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        jLabel1.setAlignmentY(0.2F);

        jLabel4.setFont(new java.awt.Font("Yu Gothic", 1, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(118, 111, 179));
        jLabel4.setText("No. of Iterations");
        jLabel4.setToolTipText("");
        jLabel4.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        jLabel4.setAlignmentY(0.2F);

        iterationField.setBackground(new java.awt.Color(46, 58, 72));
        iterationField.setForeground(new java.awt.Color(255, 255, 255));
        iterationField.setBorder(null);

        jLabel5.setFont(new java.awt.Font("Yu Gothic", 1, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(118, 111, 179));
        jLabel5.setText("Number of roots");
        jLabel5.setToolTipText("");
        jLabel5.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        jLabel5.setAlignmentY(0.2F);

        rootCountField.setBackground(new java.awt.Color(46, 58, 72));
        rootCountField.setForeground(new java.awt.Color(255, 255, 255));
        rootCountField.setBorder(null);

        jLabel6.setFont(new java.awt.Font("Yu Gothic", 1, 24)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(118, 111, 179));
        jLabel6.setText("Roots");
        jLabel6.setToolTipText("");
        jLabel6.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        jLabel6.setAlignmentY(0.2F);

        numButton15.setBackground(new java.awt.Color(46, 58, 72));
        numButton15.setForeground(new java.awt.Color(255, 255, 255));
        numButton15.setText("/");
        numButton15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                numButton15ActionPerformed(evt);
            }
        });

        numButton16.setBackground(new java.awt.Color(46, 58, 72));
        numButton16.setForeground(new java.awt.Color(255, 255, 255));
        numButton16.setText("(");
        numButton16.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                numButton16ActionPerformed(evt);
            }
        });

        numButton17.setBackground(new java.awt.Color(46, 58, 72));
        numButton17.setForeground(new java.awt.Color(255, 255, 255));
        numButton17.setText("AC");
        numButton17.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                numButton17ActionPerformed(evt);
            }
        });

        numButton18.setBackground(new java.awt.Color(46, 58, 72));
        numButton18.setForeground(new java.awt.Color(255, 255, 255));
        numButton18.setText("*");
        numButton18.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                numButton18ActionPerformed(evt);
            }
        });

        numButton19.setBackground(new java.awt.Color(46, 58, 72));
        numButton19.setForeground(new java.awt.Color(255, 255, 255));
        numButton19.setText(")");
        numButton19.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                numButton19ActionPerformed(evt);
            }
        });

        numButton20.setBackground(new java.awt.Color(46, 58, 72));
        numButton20.setForeground(new java.awt.Color(255, 255, 255));
        numButton20.setText("DEL");
        numButton20.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                numButton20ActionPerformed(evt);
            }
        });

        numButton21.setBackground(new java.awt.Color(46, 58, 72));
        numButton21.setForeground(new java.awt.Color(255, 255, 255));
        numButton21.setText("^");
        numButton21.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                numButton21ActionPerformed(evt);
            }
        });

        numButton22.setBackground(new java.awt.Color(46, 58, 72));
        numButton22.setForeground(new java.awt.Color(255, 255, 255));
        numButton22.setText("iteration");
        numButton22.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                numButton22ActionPerformed(evt);
            }
        });

        equationTextField.setBackground(new java.awt.Color(46, 58, 72));
        equationTextField.setForeground(new java.awt.Color(255, 255, 255));
        equationTextField.setBorder(null);

        jLabel12.setFont(new java.awt.Font("Yu Gothic", 1, 18)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(118, 111, 179));
        jLabel12.setText("0.0001%");
        jLabel12.setToolTipText("");
        jLabel12.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        jLabel12.setAlignmentY(0.2F);

        endTextField.setBackground(new java.awt.Color(46, 58, 72));
        endTextField.setForeground(new java.awt.Color(255, 255, 255));
        endTextField.setBorder(null);

        startTextField.setBackground(new java.awt.Color(46, 58, 72));
        startTextField.setForeground(new java.awt.Color(255, 255, 255));
        startTextField.setBorder(null);

        jLabel14.setFont(new java.awt.Font("Yu Gothic", 1, 18)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(118, 111, 179));
        jLabel14.setText("Error(%)");
        jLabel14.setToolTipText("");
        jLabel14.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        jLabel14.setAlignmentY(0.2F);

        numButton27.setBackground(new java.awt.Color(46, 58, 72));
        numButton27.setForeground(new java.awt.Color(255, 255, 255));
        numButton27.setText("Bounds");
        numButton27.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                numButton27ActionPerformed(evt);
            }
        });

        jLabel15.setFont(new java.awt.Font("Yu Gothic", 1, 18)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(118, 111, 179));
        jLabel15.setText("start");
        jLabel15.setToolTipText("");
        jLabel15.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        jLabel15.setAlignmentY(0.2F);

        jLabel16.setFont(new java.awt.Font("Yu Gothic", 1, 18)); // NOI18N
        jLabel16.setForeground(new java.awt.Color(118, 111, 179));
        jLabel16.setText("end");
        jLabel16.setToolTipText("");
        jLabel16.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        jLabel16.setAlignmentY(0.2F);

        rootDisplay.setBackground(new java.awt.Color(46, 58, 72));
        rootDisplay.setForeground(new java.awt.Color(255, 255, 255));
        rootDisplay.setBorder(null);

        numButton30.setBackground(new java.awt.Color(46, 58, 72));
        numButton30.setForeground(new java.awt.Color(255, 255, 255));
        numButton30.setText("sin");
        numButton30.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                numButton30ActionPerformed(evt);
            }
        });

        numButton31.setBackground(new java.awt.Color(46, 58, 72));
        numButton31.setForeground(new java.awt.Color(255, 255, 255));
        numButton31.setText("cos");
        numButton31.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                numButton31ActionPerformed(evt);
            }
        });

        numButton32.setBackground(new java.awt.Color(46, 58, 72));
        numButton32.setForeground(new java.awt.Color(255, 255, 255));
        numButton32.setText("tan");
        numButton32.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                numButton32ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(numButton, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(numButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(numButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(numButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(numButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(numButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(numButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(numButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(numButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(numButton10, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(numButton22, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jLabel1)
                    .addComponent(equationTextField))
                .addGap(93, 93, 93)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(numButton11, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(numButton12, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(numButton9, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(numButton14, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(numButton21, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(numButton13, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(numButton17, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(numButton16, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(numButton15, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(numButton20, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(numButton19, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(numButton18, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(6, 6, 6)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(numButton32, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(numButton30, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(numButton31, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jLabel4)
                    .addComponent(iterationField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 374, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(75, 75, 75)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rootCountField)
                            .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rootDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(startTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(endTextField)
                            .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(numButton27, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(44, 44, 44))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(iterationField)
                            .addComponent(equationTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 46, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(numButton, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(numButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(numButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(numButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(numButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(numButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(numButton22, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(numButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(numButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(numButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(numButton10, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(numButton18, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(numButton30, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(jPanel2Layout.createSequentialGroup()
                                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(numButton9, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(numButton14, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(numButton13, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(numButton21, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(numButton11, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(numButton12, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGroup(jPanel2Layout.createSequentialGroup()
                                    .addComponent(numButton15, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(numButton16, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(numButton19, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(numButton31, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addGroup(jPanel2Layout.createSequentialGroup()
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                .addComponent(numButton17, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(numButton20, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(numButton32, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                        .addGap(18, 18, 18))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rootCountField, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(endTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(rootDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(12, 12, 12)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(startTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addComponent(numButton27, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 500, 1290, 340));

        jPanel3.setBackground(new java.awt.Color(27, 34, 42));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 950, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 20, Short.MAX_VALUE)
        );

        jPanel1.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 90, 950, 20));

        jPanel5.setBackground(new java.awt.Color(27, 34, 42));

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 610, Short.MAX_VALUE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 10, Short.MAX_VALUE)
        );

        jPanel1.add(jPanel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 112, 610, 10));

        displayTab.setBackground(new java.awt.Color(46, 58, 74));
        displayTab.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(27, 34, 42), new java.awt.Color(27, 34, 42)));

        panelRound4.setBackground(new java.awt.Color(46, 58, 74));
        panelRound4.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(27, 34, 42), new java.awt.Color(27, 34, 42)));

        numButton23.setBackground(new java.awt.Color(46, 58, 72));
        numButton23.setForeground(new java.awt.Color(255, 255, 255));
        numButton23.setText("Interval");
        numButton23.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                numButton23ActionPerformed(evt);
            }
        });

        graphicalTable.setBackground(new java.awt.Color(27, 34, 42));
        graphicalTable.setForeground(new java.awt.Color(255, 255, 255));
        graphicalTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Iterations", "x", "f(x)"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Short.class, java.lang.Double.class, java.lang.Double.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        graphicalTable.setFocusable(false);
        graphicalTable.setRowHeight(25);
        graphicalTable.setSelectionForeground(new java.awt.Color(255, 255, 255));
        jScrollPane1.setViewportView(graphicalTable);

        numButton24.setBackground(new java.awt.Color(46, 58, 72));
        numButton24.setForeground(new java.awt.Color(255, 255, 255));
        numButton24.setText("CALCULATE");
        numButton24.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                numButton24ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelRound4Layout = new javax.swing.GroupLayout(panelRound4);
        panelRound4.setLayout(panelRound4Layout);
        panelRound4Layout.setHorizontalGroup(
            panelRound4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelRound4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelRound4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(panelRound4Layout.createSequentialGroup()
                        .addComponent(graphicalTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(numButton23, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 91, Short.MAX_VALUE)
                        .addComponent(numButton24, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        panelRound4Layout.setVerticalGroup(
            panelRound4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelRound4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelRound4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(graphicalTextField)
                    .addGroup(panelRound4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(numButton23, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(numButton24, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 270, Short.MAX_VALUE)
                .addContainerGap())
        );

        displayTab.addTab("tab1", panelRound4);

        panelRound5.setBackground(new java.awt.Color(46, 58, 74));

        xChange.setBackground(new java.awt.Color(33, 41, 52));
        xChange.setForeground(new java.awt.Color(255, 255, 255));
        xChange.setBorder(null);

        jLabel13.setFont(new java.awt.Font("Yu Gothic", 1, 18)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(118, 111, 179));
        jLabel13.setText("X(change)");
        jLabel13.setToolTipText("");
        jLabel13.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        jLabel13.setAlignmentY(0.2F);

        numButton25.setBackground(new java.awt.Color(46, 58, 72));
        numButton25.setForeground(new java.awt.Color(255, 255, 255));
        numButton25.setText("CALCULATE");
        numButton25.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                numButton25ActionPerformed(evt);
            }
        });

        numButton26.setBackground(new java.awt.Color(46, 58, 72));
        numButton26.setForeground(new java.awt.Color(255, 255, 255));
        numButton26.setText("Input");
        numButton26.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                numButton26ActionPerformed(evt);
            }
        });

        incrementalTable.setBackground(new java.awt.Color(27, 34, 42));
        incrementalTable.setForeground(new java.awt.Color(255, 255, 255));
        incrementalTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Iterations", "Xl", "ΔX", "Xu", "f(Xl)", "f(Xu)", "∈a%", "f(Xl)*f(Xu)"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Short.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane2.setViewportView(incrementalTable);

        javax.swing.GroupLayout panelRound5Layout = new javax.swing.GroupLayout(panelRound5);
        panelRound5.setLayout(panelRound5Layout);
        panelRound5Layout.setHorizontalGroup(
            panelRound5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelRound5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelRound5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelRound5Layout.createSequentialGroup()
                        .addComponent(jLabel13)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(xChange, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(numButton26, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(41, 41, 41)
                        .addComponent(numButton25, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 594, Short.MAX_VALUE))
                .addContainerGap())
        );
        panelRound5Layout.setVerticalGroup(
            panelRound5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelRound5Layout.createSequentialGroup()
                .addGroup(panelRound5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelRound5Layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(panelRound5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelRound5Layout.createSequentialGroup()
                                .addComponent(xChange)
                                .addGap(22, 22, 22))
                            .addGroup(panelRound5Layout.createSequentialGroup()
                                .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(panelRound5Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(panelRound5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(numButton26, javax.swing.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE)
                            .addComponent(numButton25, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 263, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        displayTab.addTab("tab2", panelRound5);

        falsiTab.setBackground(new java.awt.Color(46, 58, 74));

        bisectionTable.setBackground(new java.awt.Color(27, 34, 42));
        bisectionTable.setForeground(new java.awt.Color(255, 255, 255));
        bisectionTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "iterations", "Xl", "Xr", "Xu", "f(Xl)", "f(Xr)", "∈a%", "f(Xl)*f(Xr)"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Short.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane3.setViewportView(bisectionTable);

        numButton28.setBackground(new java.awt.Color(46, 58, 72));
        numButton28.setForeground(new java.awt.Color(255, 255, 255));
        numButton28.setText("CALCULATE");
        numButton28.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                numButton28ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout falsiTabLayout = new javax.swing.GroupLayout(falsiTab);
        falsiTab.setLayout(falsiTabLayout);
        falsiTabLayout.setHorizontalGroup(
            falsiTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(falsiTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(falsiTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 594, Short.MAX_VALUE)
                    .addComponent(numButton28, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        falsiTabLayout.setVerticalGroup(
            falsiTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(falsiTabLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(numButton28, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 262, Short.MAX_VALUE)
                .addContainerGap())
        );

        displayTab.addTab("tab3", falsiTab);

        panelRound7.setBackground(new java.awt.Color(46, 58, 74));

        falsiTable.setBackground(new java.awt.Color(27, 34, 42));
        falsiTable.setForeground(new java.awt.Color(255, 255, 255));
        falsiTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Iterations", "Xl", "Xu", "Xr", "∈a%", "f(Xl)", "f(Xu)", "f(Xr)", "f(Xl)*f(Xr)"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Short.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane4.setViewportView(falsiTable);

        numButton29.setBackground(new java.awt.Color(46, 58, 72));
        numButton29.setForeground(new java.awt.Color(255, 255, 255));
        numButton29.setText("CALCULATE");
        numButton29.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                numButton29ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelRound7Layout = new javax.swing.GroupLayout(panelRound7);
        panelRound7.setLayout(panelRound7Layout);
        panelRound7Layout.setHorizontalGroup(
            panelRound7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelRound7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelRound7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 594, Short.MAX_VALUE)
                    .addComponent(numButton29, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        panelRound7Layout.setVerticalGroup(
            panelRound7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelRound7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(numButton29, javax.swing.GroupLayout.DEFAULT_SIZE, 51, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        displayTab.addTab("tab4", panelRound7);

        rhapsonTab.setBackground(new java.awt.Color(46, 58, 74));

        fixedPointTable.setBackground(new java.awt.Color(27, 34, 42));
        fixedPointTable.setForeground(new java.awt.Color(255, 255, 255));
        fixedPointTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Iterations", "Xi", "∈a%", "∈i%"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Short.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane5.setViewportView(fixedPointTable);

        numButton33.setBackground(new java.awt.Color(46, 58, 72));
        numButton33.setForeground(new java.awt.Color(255, 255, 255));
        numButton33.setText("CALCULATE");
        numButton33.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                numButton33ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout rhapsonTabLayout = new javax.swing.GroupLayout(rhapsonTab);
        rhapsonTab.setLayout(rhapsonTabLayout);
        rhapsonTabLayout.setHorizontalGroup(
            rhapsonTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, rhapsonTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(rhapsonTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(numButton33, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 594, Short.MAX_VALUE))
                .addContainerGap())
        );
        rhapsonTabLayout.setVerticalGroup(
            rhapsonTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, rhapsonTabLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(numButton33, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 259, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(17, 17, 17))
        );

        displayTab.addTab("tab5", rhapsonTab);

        secantTab.setBackground(new java.awt.Color(46, 58, 74));

        newtonRhapsonTable.setBackground(new java.awt.Color(27, 34, 42));
        newtonRhapsonTable.setForeground(new java.awt.Color(255, 255, 255));
        newtonRhapsonTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "iterations", "Xi", "f(Xi)", "f'(Xi)", "∈t%"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Short.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane6.setViewportView(newtonRhapsonTable);

        numButton34.setBackground(new java.awt.Color(46, 58, 72));
        numButton34.setForeground(new java.awt.Color(255, 255, 255));
        numButton34.setText("CALCULATE");
        numButton34.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                numButton34ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout secantTabLayout = new javax.swing.GroupLayout(secantTab);
        secantTab.setLayout(secantTabLayout);
        secantTabLayout.setHorizontalGroup(
            secantTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, secantTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(secantTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(numButton34, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 594, Short.MAX_VALUE))
                .addContainerGap())
        );
        secantTabLayout.setVerticalGroup(
            secantTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, secantTabLayout.createSequentialGroup()
                .addContainerGap(7, Short.MAX_VALUE)
                .addComponent(numButton34, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        displayTab.addTab("tab6", secantTab);

        panelRound3.setBackground(new java.awt.Color(46, 58, 74));
        panelRound3.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        secantTable.setBackground(new java.awt.Color(27, 34, 42));
        secantTable.setForeground(new java.awt.Color(255, 255, 255));
        secantTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "iterations", "Xprevious", "Xcurrent", "Xi+1", "f(Xprevious)", "f(Xcurrent)", "∈t%"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Short.class, java.lang.Double.class, java.lang.Double.class, java.lang.Object.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane7.setViewportView(secantTable);

        numButton35.setBackground(new java.awt.Color(46, 58, 72));
        numButton35.setForeground(new java.awt.Color(255, 255, 255));
        numButton35.setText("CALCULATE");
        numButton35.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                numButton35ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelRound3Layout = new javax.swing.GroupLayout(panelRound3);
        panelRound3.setLayout(panelRound3Layout);
        panelRound3Layout.setHorizontalGroup(
            panelRound3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelRound3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelRound3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 592, Short.MAX_VALUE)
                    .addComponent(numButton35, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        panelRound3Layout.setVerticalGroup(
            panelRound3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelRound3Layout.createSequentialGroup()
                .addContainerGap(9, Short.MAX_VALUE)
                .addComponent(numButton35, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        displayTab.addTab("tab7", panelRound3);

        rootHolder.setBackground(new java.awt.Color(46, 58, 74));
        rootHolder.setRoundBottomLeft(50);
        rootHolder.setRoundBottomRight(50);
        rootHolder.setRoundTopLeft(50);
        rootHolder.setRoundTopRight(50);

        javax.swing.GroupLayout rootHolderLayout = new javax.swing.GroupLayout(rootHolder);
        rootHolder.setLayout(rootHolderLayout);
        rootHolderLayout.setHorizontalGroup(
            rootHolderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 606, Short.MAX_VALUE)
        );
        rootHolderLayout.setVerticalGroup(
            rootHolderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 331, Short.MAX_VALUE)
        );

        displayTab.addTab("tab8", rootHolder);

        jPanel1.add(displayTab, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 120, 610, 370));

        jPanel4.setBackground(new java.awt.Color(46, 58, 74));
        jPanel4.setForeground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 470, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 330, Short.MAX_VALUE)
        );

        jPanel1.add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 150, 470, 330));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void graphicalTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_graphicalTextFieldActionPerformed
        
    }//GEN-LAST:event_graphicalTextFieldActionPerformed

    private void numButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_numButton7ActionPerformed
        equationComp("3");
    }//GEN-LAST:event_numButton7ActionPerformed

    private void numButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_numButton10ActionPerformed
        equationComp("0");
    }//GEN-LAST:event_numButton10ActionPerformed

    private void numButton21ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_numButton21ActionPerformed
        equationOperator("^");
    }//GEN-LAST:event_numButton21ActionPerformed

    private void numButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_numButtonActionPerformed
        equationComp("9");
    }//GEN-LAST:event_numButtonActionPerformed

    private void numButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_numButton1ActionPerformed
        equationComp("8");
    }//GEN-LAST:event_numButton1ActionPerformed

    private void numButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_numButton2ActionPerformed
        equationComp("7");
    }//GEN-LAST:event_numButton2ActionPerformed

    private void numButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_numButton3ActionPerformed
        equationComp("6");
    }//GEN-LAST:event_numButton3ActionPerformed

    private void numButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_numButton4ActionPerformed
        equationComp("5");
    }//GEN-LAST:event_numButton4ActionPerformed

    private void numButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_numButton5ActionPerformed
        equationComp("4");
    }//GEN-LAST:event_numButton5ActionPerformed

    private void numButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_numButton8ActionPerformed
        equationComp("2");
    }//GEN-LAST:event_numButton8ActionPerformed

    private void numButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_numButton6ActionPerformed
        equationComp("1");
    }//GEN-LAST:event_numButton6ActionPerformed

    private void numButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_numButton9ActionPerformed
        equationOperator("+");
    }//GEN-LAST:event_numButton9ActionPerformed

    private void numButton14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_numButton14ActionPerformed
        equationOperator("-");
    }//GEN-LAST:event_numButton14ActionPerformed

    private void numButton15ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_numButton15ActionPerformed
        equationOperator("/");
    }//GEN-LAST:event_numButton15ActionPerformed

    private void numButton18ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_numButton18ActionPerformed
        equationOperator("*");
    }//GEN-LAST:event_numButton18ActionPerformed

    private void numButton13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_numButton13ActionPerformed
        equationOperator(".");
    }//GEN-LAST:event_numButton13ActionPerformed

    private void numButton16ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_numButton16ActionPerformed
        equationSpecialComp("(");
    }//GEN-LAST:event_numButton16ActionPerformed

    private void numButton19ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_numButton19ActionPerformed
        equationSpecialComp(")");
    }//GEN-LAST:event_numButton19ActionPerformed

    private void numButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_numButton11ActionPerformed
        equationSpecialComp("e");
    }//GEN-LAST:event_numButton11ActionPerformed

    private void numButton12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_numButton12ActionPerformed
        equationSpecialComp("X");
    }//GEN-LAST:event_numButton12ActionPerformed

    private void numButton20ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_numButton20ActionPerformed
        deleteFunc();
    }//GEN-LAST:event_numButton20ActionPerformed

    private void numButton22ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_numButton22ActionPerformed
        textFieldSwitch();
    }//GEN-LAST:event_numButton22ActionPerformed

    private void graphicalButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_graphicalButtonActionPerformed
        displayTab.setSelectedIndex(0);
    }//GEN-LAST:event_graphicalButtonActionPerformed

    private void incrementalButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_incrementalButtonActionPerformed
        displayTab.setSelectedIndex(1);
    }//GEN-LAST:event_incrementalButtonActionPerformed

    private void bisectionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bisectionButtonActionPerformed
        displayTab.setSelectedIndex(2);
    }//GEN-LAST:event_bisectionButtonActionPerformed

    private void falsiButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_falsiButtonActionPerformed
        displayTab.setSelectedIndex(3);
    }//GEN-LAST:event_falsiButtonActionPerformed

    private void fixedButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fixedButtonActionPerformed
        displayTab.setSelectedIndex(4);
    }//GEN-LAST:event_fixedButtonActionPerformed

    private void rhapsonButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rhapsonButtonActionPerformed
        displayTab.setSelectedIndex(5);
    }//GEN-LAST:event_rhapsonButtonActionPerformed

    private void secantButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_secantButtonActionPerformed
        displayTab.setSelectedIndex(6);
    }//GEN-LAST:event_secantButtonActionPerformed

    private void numButton23ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_numButton23ActionPerformed
        if(tfSwitch!=2){
            tfSwitch = 2;
        }else{
            tfSwitch = 0;
        }
    }//GEN-LAST:event_numButton23ActionPerformed

    private void numButton24ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_numButton24ActionPerformed
        
        if(Interval!=null){
            double finalInterval = Double.parseDouble(Interval);
            graphicalDisplay(equation,finalInterval,iterations,start,end);
        }else{
            double finalInterval = Double.parseDouble(defaultInterval);
            graphicalDisplay(equation,finalInterval,iterations,start,end);
            
        }
    }//GEN-LAST:event_numButton24ActionPerformed

    private void numButton25ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_numButton25ActionPerformed
        
        incrementalSearchDisplay(equation,iterations,xChangeIncremental,start,end);
        
    }//GEN-LAST:event_numButton25ActionPerformed

    private void numButton26ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_numButton26ActionPerformed
        if(tfSwitch!=3){
            tfSwitch=4;
        }
    }//GEN-LAST:event_numButton26ActionPerformed

    private void numButton17ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_numButton17ActionPerformed
        clearLine();
    }//GEN-LAST:event_numButton17ActionPerformed

    private void numButton27ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_numButton27ActionPerformed
        if(tfSwitch!=5){
            tfSwitch=5;
        }else if(tfSwitch==5){
            tfSwitch=6;
        }
    }//GEN-LAST:event_numButton27ActionPerformed

    private void numButton28ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_numButton28ActionPerformed
        bisectionDisplay(equation, iterations,start,end);
    }//GEN-LAST:event_numButton28ActionPerformed

    private void numButton29ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_numButton29ActionPerformed
        regulaFalsiDisplay(equation,iterations,start,end);
    }//GEN-LAST:event_numButton29ActionPerformed

    private void numButton30ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_numButton30ActionPerformed
        equationSpecialComp("sin");
    }//GEN-LAST:event_numButton30ActionPerformed

    private void numButton31ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_numButton31ActionPerformed
        equationSpecialComp("cos");
    }//GEN-LAST:event_numButton31ActionPerformed

    private void numButton32ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_numButton32ActionPerformed
        equationSpecialComp("tan");
    }//GEN-LAST:event_numButton32ActionPerformed

    private void numButton33ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_numButton33ActionPerformed
        
        try {
            fixedPointDisplay(equation,iterations,start,end);
        } catch (ScriptException e) {
            System.out.println("An error occurred: " + e.getMessage());
        }
    }//GEN-LAST:event_numButton33ActionPerformed

    private void numButton34ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_numButton34ActionPerformed
        newtonRhapsonDisplay(equation,iterations,start,end);
       
    }//GEN-LAST:event_numButton34ActionPerformed

    private void numButton35ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_numButton35ActionPerformed
        secantDisplay(equation,iterations,start,end);
    }//GEN-LAST:event_numButton35ActionPerformed

    
    //GRAPHICAL METHOD
    private void graphicalDisplay(String equation, double Intervals,String iterations,String Start, String End){
        int roots = countRoots(equation,start,end);
        rootFinder(equation,start,end);
        rootDisplay(aRoot);
        graphicalGraph(equation,aRoot,start,end);
        rootCountField.setText(Integer.toString(roots));
        double k = Intervals;
        int j = Integer.parseInt(iterations);
        double start = Integer.parseInt(Start);
        double end = Integer.parseInt(End);
        double previous = 0;
        double statusChecker = 0;
        boolean isRootFound = false;
        double rootFound = 0;
        int rootCounter = 0;
        int v = 0;
        DefaultTableModel model = (DefaultTableModel) graphicalTable.getModel();
        model.getDataVector().removeAllElements();
        if(!("".equals(iterations))){
            for(int i=0; i<j;i++){
                calculate = equation.replace("X", Double.toString(start));
                Expression expression = new Expression(calculate);
                double graphicalOutput = expression.calculate();
                statusChecker = graphicalOutput/Math.abs(graphicalOutput);
                previous = statusChecker;
                if(end>=start){
                    if((statusChecker*graphicalOutput)<0){
                        rootFound = start;
                    }
                    model.addRow(new Object[]{i+1,start, graphicalOutput});
                    start+=k;
                }
            }
        }else{
            while(roots>rootCounter){
                calculate = equation.replace("X", String.valueOf(start));
                Expression expression = new Expression(calculate);
                double graphicalOutput = expression.calculate();
                statusChecker = graphicalOutput/(Math.abs(graphicalOutput));
                previous = statusChecker;
                if(end>=start){
                    if((statusChecker*graphicalOutput)<=0){
                        rootFound = graphicalOutput;
                        rootCounter++;
                    }
                    model.addRow(new Object[]{v+1,start, graphicalOutput});
                    start+=k;
                    v++;
                } else {
                    break;
                }
            }
        }
    }
    //ROOT COUNTER
    public static int countRoots(String equation, String start, String end) {
    // Create an Expression object
    Expression exp = new Expression(equation);

    double x0 = Double.parseDouble(start); // Initial value for x
    double x1 = Double.parseDouble(end);  // Upper bound for x
    double step = 0.1; // Step size for x

    int numRoots = 0;
    double y0 = exp.calculate();

    int maxIterations = 10000; // Maximum number of iterations
    int iterations = 0; // Counter for iterations

    // Iterate through the range of x values
    for (double x = x0; x <= x1; x += step) {
        exp.setExpressionString(equation.replace("X", String.valueOf(x)));
        double y1 = exp.calculate();

        // Check for sign change
        if (y0 * y1 < 0) {
            numRoots++;
        }
        y0 = y1;

        // Increment iteration counter
        iterations++;

        // Check if maximum iterations reached
        if (iterations >= maxIterations) {
            break;
        }
    }

    return numRoots;
}
    
    private void rootFinder(String equation, String start, String end){
        int roots = countRoots(equation,start,end);
        double biXl = Double.parseDouble(start);
        double biXu = Double.parseDouble(end);
        double biXr = (biXu+biXl)/2;
        double stoppingDeterminer = 1;
        double biX2 = 0;
        double biX1 = 0;
        if (roots>0){
            
            do{
                String tempXl = Double.toString(biXl);
                String tempXr = Double.toString(biXr);
            
                calculate1 = equation.replace("X", tempXl);
                calculate2 = equation.replace("X", tempXr);
                Expression expression1 = new Expression(calculate1);
                Expression expression2 = new Expression(calculate2);
                double fXl = expression1.calculate();
                double fXu = expression2.calculate();
                double determiner = fXl*fXu;
                biX2=biXr;
                stoppingDeterminer = Math.abs((biX2-biX1)/biX2)*100;
                if(stoppingDeterminer<=stoppingCriterion&&roots>0){
                    this.aRoot = biXu;
                }
                if(determiner>0){
                    biXl=biXr;
                    biXr=(biXu+biXl)/2;
                }else if(determiner<=0){
                    biXu=biXr;
                    biXr=(biXu+biXl)/2;
                }
                biX1=biX2;
            }while(stoppingDeterminer>stoppingCriterion);
        }
    }
    
    private void rootDisplay(double estimatedRoot){
        String rut = Double.toString(estimatedRoot);
        rootDisplay.setText(rut);
    }
    //INCREMENTAL SEARCH METHOD
    private void incrementalSearchDisplay(String equation, String iterations, String xChange, String start, String end){
        int roots = countRoots(equation,start,end);
        rootCountField.setText(Integer.toString(roots));
        Xl = Double.parseDouble(start);
        XChange = Double.parseDouble(xChange);
        Xu = 0;
        Xu = Xl+XChange;
        double stoppingDeterminer;
        int j = 0;
        if(iterations!=null){
            j = Integer.parseInt(iterations);
        }
        
        do{
            String tempXl = Double.toString(Xl);
            String tempXu = Double.toString(Xu);
            
            calculate1 = equation.replace("X", tempXl);
            calculate2 = equation.replace("X", tempXu);
            Expression expression1 = new Expression(calculate1);
            Expression expression2 = new Expression(calculate2);
            double fXl = expression1.calculate();
            double fXu = expression2.calculate();
            double determiner = fXl*fXu;
            String stweng = "";
            if(determiner>0){
                stweng = ">0";
            }else if(determiner<=0){
                stweng = "<0";
            }
            x2=Xu;
            stoppingDeterminer = Math.abs((x2-x1)/x2)*100;
            if(stoppingDeterminer<=stoppingCriterion&&roots>0){
                rootDisplay(Xu);
                graphicalGraph(equation,Xu,start,end);
            }
            if(j>0){
            dataIncremental.add(createRow(this.counter, Xl, XChange, Xu, fXl, fXu,stoppingDeterminer, stweng));
            }
            if(determiner>0){
                Xl=Xu;
                Xu=Xl+XChange;
            }else if(determiner<=0){
                XChange=XChange/10;
                Xu=Xl+XChange;
            }
            x1=x2;
            //change for stopper
            if(counter<2){
                stoppingDeterminer=1;
            }
            j--;
            this.counter=this.counter+1;
            
        }while(stoppingDeterminer>stoppingCriterion);
        
        DefaultTableModel model = (DefaultTableModel) incrementalTable.getModel();
        model.getDataVector().removeAllElements();
        model.fireTableDataChanged();
        for (ArrayList<Object> row : dataIncremental) {
            
                model.addRow(row.toArray());
        }
        
        dataIncremental.clear();
        counter=1;
    }
    private static ArrayList<Object> createRow(int d1, double d2, double d3, double d4, double d5, double d6,double d7, String str) {
        ArrayList<Object> row = new ArrayList<>();
        row.add(d1);
        row.add(d2);
        row.add(d3);
        row.add(d4);
        row.add(d5);
        row.add(d6);
        row.add(d7);
        row.add(str);
        return row;
    }
    
    private static ArrayList<Object> createRow1(int d1, double d2, double d3, double d4, double d5, double d6,double d7, String str) {
        ArrayList<Object> row = new ArrayList<>();
        row.add(d1);
        row.add(d2);
        row.add(d3);
        row.add(d4);
        row.add(d5);
        row.add(d6);
        row.add(d7);
        row.add(str);
        return row;
    }
    private static ArrayList<Object> createRow2(int d1, double d2, double d3, double d4, double d5, double d6,double d7,double d8, String str) {
        ArrayList<Object> row = new ArrayList<>();
        row.add(d1);
        row.add(d2);
        row.add(d3);
        row.add(d4);
        row.add(d5);
        row.add(d6);
        row.add(d7);
        row.add(d8);
        row.add(str);
        return row;
    }
    private static ArrayList<Object> createRow3(int d1, double d2, double d3, double d4) {
        ArrayList<Object> row = new ArrayList<>();
        row.add(d1);
        row.add(d2);
        row.add(d3);
        row.add(d4);
        return row;
    }
    private static ArrayList<Object> createRow4(int d1, double d2, double d3, double d4, double d5) {
        ArrayList<Object> row = new ArrayList<>();
        row.add(d1);
        row.add(d2);
        row.add(d3);
        row.add(d4);
        row.add(d5);
        return row;
    }
     private static ArrayList<Object> createRow5(int d1, double d2, double d3, double d4, double d5,  double d6, double d7) {
        ArrayList<Object> row = new ArrayList<>();
        row.add(d1);
        row.add(d2);
        row.add(d3);
        row.add(d4);
        row.add(d5);
        row.add(d6);
        row.add(d7);
        return row;
    }
    //BISECTION SEARCH
    private void bisectionDisplay(String equation, String iterations, String start, String end){
        int roots = countRoots(equation,start,end);
        rootCountField.setText(Integer.toString(roots));
        bisectionXl = Double.parseDouble(start);
        bisectionXu = Double.parseDouble(end);
        bisectionXr = (bisectionXu+bisectionXl)/2;
        double stoppingDeterminer = 1;
        int j = 0;
        if(iterations!=null){
            j = Integer.parseInt(iterations);
        }
        
        DefaultTableModel model = (DefaultTableModel) bisectionTable.getModel();
        model.getDataVector().removeAllElements();
        model.fireTableDataChanged();
        do{
            String tempXl = Double.toString(bisectionXl);
            String tempXr = Double.toString(bisectionXr);
            
            calculate1 = equation.replace("X", tempXl);
            calculate2 = equation.replace("X", tempXr);
            Expression expression1 = new Expression(calculate1);
            Expression expression2 = new Expression(calculate2);
            double fXl = expression1.calculate();
            double fXu = expression2.calculate();
            double determiner = fXl*fXu;
            String stweng = "";
            if(determiner>0){
                stweng = ">0";
            }else if(determiner<=0){
                stweng = "<0";
            }
            bisectionX2=bisectionXr;
            stoppingDeterminer = Math.abs((bisectionX2-bisectionX1)/bisectionX2)*100;
            if(stoppingDeterminer<=stoppingCriterion&&roots>0){
                rootDisplay(bisectionXr);
                 graphicalGraph(equation,bisectionXr,start,end);
            }
            if(j>0){
            dataBisection.add(createRow1(this.counter, bisectionXl, bisectionXr, bisectionXu, fXl, fXu,stoppingDeterminer, stweng));
            }
            if(determiner>0){
                bisectionXl=bisectionXr;
                bisectionXr=(bisectionXu+bisectionXl)/2;
            }else if(determiner<=0){
                bisectionXu=bisectionXr;
                bisectionXr=(bisectionXu+bisectionXl)/2;
            }
            bisectionX1=bisectionX2;
            if(counter<2){
                stoppingDeterminer=1;
            }
            j--;
            counter++;
        }while(stoppingDeterminer>stoppingCriterion);
        
        for (ArrayList<Object> row : dataBisection) {
                model.addRow(row.toArray());
        }
        dataBisection.clear();
        counter = 1;
    }
    //REGULA-FALSI SEARCH
    private void regulaFalsiDisplay(String equation, String iterations, String start, String end){
        int roots = countRoots(equation,start,end);
        rootCountField.setText(Integer.toString(roots));
        falsiXl = Double.parseDouble(start);
        falsiXu = Double.parseDouble(end);
        int maxIterations = Integer.parseInt(iterations);
        Argument X = new Argument("X");
        Argument Y = new Argument("Y");
        Argument Z = new Argument("Z");
        Argument W = new Argument("W");
        int iteration = 0;
        String stweng = "";
        double stoppingDeterminer = 1;
        DefaultTableModel model = (DefaultTableModel) falsiTable.getModel();
        model.getDataVector().removeAllElements();
        while (stoppingDeterminer>stoppingCriterion) {
            
            String tempXl = Double.toString(falsiXl);
            String tempXu = Double.toString(falsiXu);
            calculate1 = equation.replace("X", tempXl);
            calculate2 = equation.replace("X", tempXu);
            Expression expression1 = new Expression(calculate1);
            Expression expression2 = new Expression(calculate2);
            double fXl = expression1.calculate();
            double fXu = expression2.calculate();
            X.setArgumentValue(Double.parseDouble(tempXu));
            Y.setArgumentValue(fXl);
            Z.setArgumentValue(Double.parseDouble(tempXl));
            W.setArgumentValue(fXu);
            Expression expression3 = new Expression("((X*Y)-(Z*W))/(Y-W)", X, Y, Z, W);
            falsiXr = expression3.calculate();
            falsiX2=falsiXr;
            String tempXr = Double.toString(falsiXr);
            String calculate3 = equation.replace("X", tempXr);
            Expression expression4 = new Expression(calculate3);
            double fXr = expression4.calculate();
            stoppingDeterminer = Math.abs((falsiX2-falsiX1)/falsiX2)*100;
            if(stoppingDeterminer<=stoppingCriterion&&roots>0){
                rootDisplay(falsiXr);
                 graphicalGraph(equation,falsiXr,start,end);
            }
            double determiner = fXl*fXr;
            if(determiner>0){
                stweng = ">0";
            }else if(determiner<=0){
                stweng = "<0";
            }
            if(iteration < maxIterations){
                dataFalsi.add(createRow2(iteration+1, falsiXl, falsiXu, falsiXr, stoppingDeterminer,fXl, fXu,fXr, stweng));
            }
            falsiX1=falsiX2;
            if(determiner>0){
                falsiXl=falsiXr;
            }else if(determiner<=0){
                falsiXu=falsiXr;
            }
            iteration++;
        }
        for (ArrayList<Object> row : dataFalsi) {
                model.addRow(row.toArray());
        }
        dataFalsi.clear();
    }
    /*private static String transformEquation(String equation) {
        // Ensure the equation is of the form something=0
        if (!equation.endsWith("=0")) {
            throw new IllegalArgumentException("Equation must equate to 0.");
        }

        // Remove the '=0' part
        String leftPart = equation.substring(0, equation.length() - 2);

        // Use regex to extract the part that includes 'X'
        Pattern pattern = Pattern.compile("([+-]?[^+-]*)X");
        Matcher matcher = pattern.matcher(leftPart);

        StringBuilder withoutX = new StringBuilder(leftPart);
        String termWithX = null;

        // Find the term with 'X' and remove it from the left part
        if (matcher.find()) {
            termWithX = matcher.group();
            withoutX.replace(matcher.start(), matcher.end(), "");
        }

        if (termWithX == null) {
            throw new IllegalArgumentException("Equation must contain a term with 'X'.");
        }

        // Form the new equation
        String newEquation = "(" + withoutX.toString() + ")/(" + termWithX.replace("X", "") + ")=X";

        return newEquation;
    }
    */
    /*
    private static String transformEquation(String equation) {
        // Ensure the equation is of the form something=0
        if (!equation.endsWith("=0")) {
            throw new IllegalArgumentException("Equation must equate to 0.");
        }

        // Remove the '=0' part
        String leftPart = equation.substring(0, equation.length() - 2);

        // Use regex to extract the part that includes 'X'
        Pattern pattern = Pattern.compile("([+-]?[^+-]*)X");
        Matcher matcher = pattern.matcher(leftPart);

        StringBuilder withoutX = new StringBuilder(leftPart);
        String termWithX = null;

        // Find the term with 'X' and remove it from the left part
        if (matcher.find()) {
            termWithX = matcher.group();
            withoutX.replace(matcher.start(), matcher.end(), "");
        }

        if (termWithX == null) {
            throw new IllegalArgumentException("Equation must contain a term with 'X'.");
        }

        // Handle the case when the coefficient of X is 1
        if (termWithX.equals("X")) {
            termWithX = "1X";
        }

        // Extract the coefficient of X
        String coefficient = termWithX.replace("X", "");

        // Handle the case when the denominator is missing
        String denominator = "";
        if (!coefficient.isEmpty()) {
            denominator = "/" + coefficient;
        }

        // Form the new equation
        String newEquation = "(" + withoutX.toString() + ")" + denominator + "=X";

        return newEquation;
    }
    */
    
    //CLOSEST TO SUCCESS
    /*
    private static String transformEquation(String equation) {
        // Ensure the equation is of the form something=0
        if (!equation.endsWith("=0")) {
            throw new IllegalArgumentException("Equation must equate to 0.");
        }

        // Remove the '=0' part
        String leftPart = equation.substring(0, equation.length() - 2);

        // Use regex to extract the part that includes 'X'
        Pattern pattern = Pattern.compile("([+-]?(\\([^()]+\\)|[^+-]+))(X)");
        Matcher matcher = pattern.matcher(leftPart);

        StringBuilder withoutX = new StringBuilder(leftPart);
        String termWithX = null;

        // Find the term with 'X' and remove it from the left part
        if (matcher.find()) {
            termWithX = matcher.group();
            withoutX.replace(matcher.start(), matcher.end(), "");
        }

        if (termWithX == null) {
            throw new IllegalArgumentException("Equation must contain a term with 'X'.");
        }

        // Handle the case when the coefficient of X is 1
        if (termWithX.equals("X")) {
            termWithX = "1X";
        }

        // Extract the coefficient of X
        String coefficient = termWithX.replace("X", "");

        // Handle the case when the denominator is missing
        String denominator = "";
        if (!coefficient.isEmpty()) {
            if (coefficient.startsWith("/")) {
                coefficient = "-" + coefficient.substring(1);
            } else if (coefficient.startsWith("--")) {
                coefficient = coefficient.substring(2); // Remove double negative
            } else {
                coefficient = "-" + coefficient;
            }
            if (coefficient.startsWith("--")) {
                coefficient = coefficient.substring(2); // Remove double negative
            }
            denominator = "/" + coefficient;
        }

        // Form the new equation
        String newEquation = "(" + withoutX.toString() + ")" + denominator;

        // Remove trailing asterisk if present
        if (newEquation.endsWith("*")) {
            newEquation = newEquation.substring(0, newEquation.length() - 1);
        }

        return newEquation;
    }\
    */
    /* IMPORTANT
    private static String transformEquation(String equation) {
        // Ensure the equation is of the form something=0
        if (!equation.endsWith("=0")) {
            throw new IllegalArgumentException("Equation must equate to 0.");
        }

        // Remove the '=0' part
        String leftPart = equation.substring(0, equation.length() - 2);

        // Use regex to extract the part that includes 'X'
        Pattern pattern = Pattern.compile("([+-]?(\\([^()]+\\)|[^+-]+))X");
        Matcher matcher = pattern.matcher(leftPart);

        StringBuilder withoutX = new StringBuilder(leftPart);
        String termWithX = null;

        // Find the term with 'X' and remove it from the left part
        if (matcher.find()) {
            termWithX = matcher.group();
            withoutX.replace(matcher.start(), matcher.end(), "");
        }

        if (termWithX == null) {
            throw new IllegalArgumentException("Equation must contain a term with 'X'.");
        }

        // Handle the case when the coefficient of X is 1
        if (termWithX.equals("X")) {
            termWithX = "1X";
        }

        // Extract the coefficient of X
        String coefficient = termWithX.replace("X", "");

        // Handle the case when the denominator is missing
        String denominator = "";
        if (!coefficient.isEmpty()) {
            denominator = "/" + coefficient;
        }

        // Form the new equation
        String newEquation = "(" + withoutX.toString() + ")" + denominator ;

        return newEquation;
    }
    */
    /*
     private static String transformEquation(String equation) {
        // Ensure the equation is of the form something=0
        if (!equation.endsWith("=0")) {
            throw new IllegalArgumentException("Equation must equate to 0.");
        }

        // Remove the '=0' part
        String leftPart = equation.substring(0, equation.length() - 2);

        // Use regex to extract the parts that include 'X' and 'e'
        Pattern pattern = Pattern.compile("([+-]?(\\([^()]+\\)|[^+-]+))(X|e)");
        Matcher matcher = pattern.matcher(leftPart);

        StringBuilder numerator = new StringBuilder();
        StringBuilder denominator = new StringBuilder();

        // Find the terms with 'X' and 'e' and construct the numerator and denominator
        while (matcher.find()) {
            String term = matcher.group(1);
            String variable = matcher.group(3);
            String coefficient = term.replace(variable, "");
            if (coefficient.isEmpty() || coefficient.equals("+") || coefficient.equals("-")) {
                coefficient += "1";
            }
            if (coefficient.startsWith("-")) {
                coefficient = coefficient.substring(1);
                denominator.append(coefficient);
            } else {
                numerator.append(coefficient);
            }
            if (variable.equals("e")) {
                numerator.append("e");
            }
        }

        // Handle the case when there's no coefficient before 'X'
        if (numerator.length() == 0) {
            numerator.append("1");
        }

        // Handle the case when the denominator is empty
        if (denominator.length() == 0) {
            denominator.append("1");
        }

        // Form the new equation
        String newEquation = numerator + "/(" + denominator + ")";

        return newEquation;
    }
    */
    public static double evaluateFunction(String function, double x) {
        net.objecthunter.exp4j.Expression expression = new ExpressionBuilder(function)
                .variables("X")
                .build()
                .setVariable("X", x);
        return expression.evaluate();
    }
    private double g(String equation, double x) {
    // Example: Let's choose g(x) = x - f(x) / f'(x), similar to the Newton-Raphson method
    double fx = evaluateFunction(equation,x);
    double fDashX = differentiateFunction(equation, x);

    // Avoid division by zero
    if (fDashX == 0) {
        throw new ArithmeticException("Derivative is zero. Division by zero error.");
    }

    return x - (fx / fDashX);
}
     private double differentiateFunction(String equation, double xValue) {
    double h = 0.000001; // a small value
    return (evaluateFunction(equation, xValue + h) - evaluateFunction(equation, xValue)) / h;
    }
    
    /*
    public static String transformEquation(String equation) {
        // Ensure the equation is of the form something=0
        if (!equation.endsWith("=0")) {
            throw new IllegalArgumentException("Equation must equate to 0.");
        }

        // Remove the '=0' part
        String leftPart = equation.substring(0, equation.length() - 2);

        // Use regex to extract the part that includes the variable
        Pattern pattern = Pattern.compile("([+-]?(\\([^()]+\\)|[^+-]+))(X|[a-zA-Z])");
        Matcher matcher = pattern.matcher(leftPart);

        StringBuilder withoutX = new StringBuilder(leftPart);
        String termWithX = null;

        // Find the term with the variable and remove it from the left part
        if (matcher.find()) {
            termWithX = matcher.group();
            withoutX.replace(matcher.start(), matcher.end(), "");
        }

        if (termWithX == null) {
            throw new IllegalArgumentException("Equation must contain a term with a variable (e.g., 'X').");
        }

        // Handle the case when the coefficient of the variable is 1
        if (termWithX.matches("[+-]?X")) {
            termWithX = termWithX.replace("X", "1X");
        }

        // Extract the coefficient of the variable
        String coefficient = termWithX.replace("X", "");

        // Handle the case when the denominator is missing
        String denominator = "";
        if (!coefficient.isEmpty()) {
            if (coefficient.startsWith("/")) {
                coefficient = "-" + coefficient.substring(1);
            } else if (coefficient.startsWith("--")) {
                coefficient = coefficient.substring(2); // Remove double negative
            } else {
                coefficient = "-" + coefficient;
            }
            if(coefficient.startsWith("--")){
                coefficient = coefficient.substring(2);
            }
            denominator = "/" + coefficient;
        }

        // Form the new equation
        String newEquation = "(" + withoutX.toString() + ")" + denominator;

        // Remove trailing asterisk if present
        if (newEquation.endsWith("*")) {
            newEquation = newEquation.substring(0, newEquation.length() - 1);
        }

        // Handle the exponential term
        if (leftPart.contains("^")) {
            int index = leftPart.indexOf("^");
            String exponent = leftPart.substring(index + 1);
            newEquation += "*e^" + exponent;
        }

        return newEquation;
    }
*/
    
    //FIXED-POINT SEARCH
    private void fixedPointDisplay(String equation, String iterations, String start, String end) throws ScriptException{
        int roots = countRoots(equation,start,end);
        rootCountField.setText(Integer.toString(roots));
        int j = Integer.parseInt(iterations);
        int i = 0;
        double criterion = 0;
        double stoppingDeterminer=1;
        double newXi1 = Double.parseDouble(start);
        double oldXi1=0;
        rootFinder(equation,start,end);
        
        // net.objecthunter.exp4j.Expression expression23 = new ExpressionBuilder(equation)
        //   .variables("X")
        //   .build();
         
        
        /*
        Assertions.assertEquals(12, result);
        
        
        */
        //String newEquation = transformEquation(equation+"=0");
        //iterationField.setText(newEquation);
        DefaultTableModel model = (DefaultTableModel) fixedPointTable.getModel();
        model.getDataVector().removeAllElements();
        model.fireTableDataChanged();
        /*
        while(stoppingDeterminer1>stoppingCriterion){
            
            String equate = newEquation.replace("X", Double.toString(newXi1));
            Expression expression6 = new Expression(equate);
            
            oldXi1=newXi1;
            newXi1 = expression23.setVariable("X", oldXi).evaluate();
            stoppingDeterminer1 = Math.abs((newXi1-oldXi1)/newXi1)*100;
            if(stoppingDeterminer<=stoppingCriterion&&roots>0){
                approximateRoot = newXi1;
            }
            //oldXi1=newXi1;
        }
        for (ArrayList<Object> row : dataFixedPoint) {
                model.addRow(row.toArray());
        }
        
        newXi=Double.parseDouble(start);
        oldXi=0;
        */
        
        while(stoppingDeterminer>stoppingCriterion){
            /*
            JOptionPane.showMessageDialog(null, newEquation);
            String equate = newEquation.replace("X", Double.toString(newXi));
            Expression expression6 = new Expression(equate);
            */
            oldXi1=newXi1;
            /*
            net.objecthunter.exp4j.Expression expression = new ExpressionBuilder(equation)
                .variables("X")
                .build();

        // Define the g(x) function
            net.objecthunter.exp4j.Expression gxExpression = new ExpressionBuilder("X - f / fPrime")
                .variables("X", "f", "fPrime")
                .build();
            net.objecthunter.exp4j.Expression fPrimeExpression = new ExpressionBuilder("2 * X")
                .variables("X")
                .build();
            expression.setVariable("X", newXi1);
            double fValue = expression.evaluate();
            fPrimeExpression.setVariable("X", newXi1);
            double fPrimeValue = fPrimeExpression.evaluate();
            gxExpression.setVariable("X", newXi1);
            gxExpression.setVariable("f", fValue);
            gxExpression.setVariable("fPrime", fPrimeValue);
            double gxValue = gxExpression.evaluate();
            */
            //String equate11 = newEquation.replace("X", Double.toString(newXi1));
            //Expression expression99 = new Expression(equate11);
            
            newXi1 = g(equation,newXi1);
            //newXi1 = expression23.setVariable("X", oldXi1).evaluate();
            stoppingDeterminer = Math.abs((newXi1-oldXi1)/newXi1)*100;
            criterion = ((Math.abs(aRoot - newXi1))/(aRoot))*100;
            if(stoppingDeterminer<=stoppingCriterion&&roots>0){
                rootDisplay(newXi1);
                graphicalGraph(equation,newXi1,start,end);
            }
            if(j>=0){
                i++;
                if(i==1){
                    criterion = 100;
                }
                dataFixedPoint.add(createRow3(Math.abs(i), newXi1, stoppingDeterminer,criterion));
            }
            if(i==20){
                stoppingDeterminer=0;
            }
            //oldXi=newXi;
        }
        for (ArrayList<Object> row : dataFixedPoint) {
                model.addRow(row.toArray());
        }
        dataFixedPoint.clear();
    }
    public static String replaceSqrt(String input) {
        // Check if "sqrt(" is present in the input string
        if (!input.contains("Sqrt(")) {
            return input; // If "sqrt(" is not found, return the original string
        }

        StringBuilder result = new StringBuilder();
        int startIndex = 0;

        // Find index of the first occurrence of "sqrt("
        int sqrtIndex = input.indexOf("Sqrt(", startIndex);
        while (sqrtIndex != -1) {
            // Append the substring before "sqrt("
            result.append(input, startIndex, sqrtIndex);

            // Find the index of the closing parenthesis after "sqrt("
            int closingParenIndex = input.indexOf(')', sqrtIndex + 5);
            if (closingParenIndex == -1) {
                // If closing parenthesis not found, return original string
                return input;
            }

            // Get the value inside sqrt
            String valueInsideSqrt = input.substring(sqrtIndex + 5, closingParenIndex);

            // Append the value^(1/2)
            result.append(valueInsideSqrt).append("^(1/2)");

            // Update startIndex to continue searching from the position after closing parenthesis
            startIndex = closingParenIndex + 1;

            // Find the next occurrence of "sqrt("
            sqrtIndex = input.indexOf("Sqrt(", startIndex);
        }

        // Append the remaining substring
        result.append(input.substring(startIndex));

        return result.toString();
    }
    private void newtonRhapsonDisplay(String equation, String iterations, String start, String end){
        int roots = countRoots(equation,start,end);
        rootCountField.setText(Integer.toString(roots));
        int j = Integer.parseInt(iterations);
        int i = 0;
        int criterion = 1;
        double newXi=Double.parseDouble(start);
        double displayXi=Double.parseDouble(start);
        double oldXi=0;
        double stoppingDeterminer=100;
        
        ExprEvaluator evaluator = new ExprEvaluator();
        IExpr expr = evaluator.evaluate(equation);
        IExpr diffExpr = evaluator.eval("D(" + expr.toString() + "," + "X" + ")");
        String newEquation =diffExpr.toString();
        
        
        //newEquation = replaceSqrt(newEquation);
        //String ac = newEquation;
        double fXi = 0;
        double ffXi = 0;
        DefaultTableModel model = (DefaultTableModel) newtonRhapsonTable.getModel();
        model.getDataVector().removeAllElements();
        model.fireTableDataChanged();
        while(stoppingDeterminer>stoppingCriterion){
            //iterationField.setText(newEquation);
            String equate1 = equation.replace("X", Double.toString(newXi));
            Expression expression7 = new Expression(equate1);
            fXi = expression7.calculate();
            
            
            
            ffXi = differentiateFunction(equation,newXi);
            newXi = g(equation,newXi);
            stoppingDeterminer = Math.abs((newXi-oldXi)/newXi)*100;
            if(stoppingDeterminer<=stoppingCriterion&&roots>0){
                rootDisplay(newXi);
                graphicalGraph(equation,newXi,start,end);
            }
            if(j>=i){
                dataNewtonRhapson.add(createRow4(criterion, displayXi,fXi,ffXi, stoppingDeterminer));
            }
            displayXi = newXi;
            oldXi=newXi;
            criterion++;
           
                    i--;
        }
        for (ArrayList<Object> row : dataNewtonRhapson) {
                model.addRow(row.toArray());
        }
        dataNewtonRhapson.clear();
    }
    private void secantDisplay(String equation, String iterations, String start, String end){
        int roots = countRoots(equation,start,end);
        rootCountField.setText(Integer.toString(roots));
        int j = Integer.parseInt(iterations);
        int i = 0;
        int criterion = 1;
        double Xc=Double.parseDouble(end);
        double Xp=Double.parseDouble(start);
        double stoppingDeterminer=1;
        Argument X = new Argument("X");
        Argument Y = new Argument("Y");
        Argument Z = new Argument("Z");
        Argument W = new Argument("W");
        double fXc = 0;
        double fXp = 0;
        rootFinder(equation,start,end);
        //JOptionPane.showMessageDialog(null, aRoot);
        DefaultTableModel model = (DefaultTableModel) secantTable.getModel();
        model.getDataVector().removeAllElements();
        model.fireTableDataChanged();
        while(stoppingDeterminer>stoppingCriterion){
            
             String equate = equation.replace("X", Double.toString(Xc));
             //JOptionPane.showMessageDialog(null, equate);
             Expression expression = new Expression(equate);
             fXc = expression.calculate();
             
             String equate1 = equation.replace("X", Double.toString(Xp));
             //JOptionPane.showMessageDialog(null, equate1);
             Expression expression1 = new Expression(equate1);
             fXp = expression1.calculate();
             
             //JOptionPane.showMessageDialog(null, fXc);
             //JOptionPane.showMessageDialog(null, fXp);
             
             X.setArgumentValue(Xc);
             Y.setArgumentValue(fXc);
             Z.setArgumentValue(Xp);
             W.setArgumentValue(fXp);
             
             Expression expression3 = new Expression("(X)-(((Y)*((Z)-(X)))/((W)-(Y)))", X, Y, Z, W);
             //JOptionPane.showMessageDialog(null, expression3.toString());
             double newXc = expression3.calculate();
             //String equate2 = equation.replace("X", Double.toString(newXc));
             //Expression expression2 = new Expression(equate2);
             //double fXcnew = expression2.calculate();
             stoppingDeterminer = Math.abs((Xc-aRoot)/aRoot)*100;
             //JOptionPane.showMessageDialog(null,"stopper: "+ stoppingDeterminer);
            if(stoppingDeterminer<=stoppingCriterion&&roots>0){
                rootDisplay(newXc);
                graphicalGraph(equation,Xc,start,end);
            }
            if (criterion == 1000){
                stoppingDeterminer = 0;
            }
            if(j>=i){
                dataSecant.add(createRow5(criterion,Xp,Xc,newXc,fXp,fXc,stoppingDeterminer));
            }
            Xp = Xc;
            Xc = newXc;
            //fXcnew = 0;
            criterion++;
                    i--;
        }
        for (ArrayList<Object> row : dataSecant) {
                model.addRow(row.toArray());
        }
        
        dataSecant.clear();
    }
        /*
        int roots = countRoots(equation,start,end);
        rootCountField.setText(Integer.toString(roots));
        falsiXl = Double.parseDouble(start);
        falsiXu = Double.parseDouble(end);
        int maxIterations = Integer.parseInt(iterations);
        Argument X = new Argument("X");
        Argument Y = new Argument("Y");
        Argument Z = new Argument("Z");
        Argument W = new Argument("W");
        int iteration = 0;
        String stweng = "";
        double stoppingDeterminer = 1;
        DefaultTableModel model = (DefaultTableModel) falsiTable.getModel();
        model.getDataVector().removeAllElements();
        while (stoppingDeterminer>stoppingCriterion) {
            
            String tempXl = Double.toString(falsiXl);
            String tempXu = Double.toString(falsiXu);
            calculate1 = equation.replace("X", tempXl);
            calculate2 = equation.replace("X", tempXu);
            Expression expression1 = new Expression(calculate1);
            Expression expression2 = new Expression(calculate2);
            double fXl = expression1.calculate();
            double fXu = expression2.calculate();
            X.setArgumentValue(Double.parseDouble(tempXu));
            Y.setArgumentValue(fXl);
            Z.setArgumentValue(Double.parseDouble(tempXl));
            W.setArgumentValue(fXu);
            Expression expression3 = new Expression("((X*Y)-(Z*W))/(Y-W)", X, Y, Z, W);
            falsiXr = expression3.calculate();
            falsiX2=falsiXr;
            String tempXr = Double.toString(falsiXr);
            String calculate3 = equation.replace("X", tempXr);
            Expression expression4 = new Expression(calculate3);
            double fXr = expression4.calculate();
            stoppingDeterminer = Math.abs((falsiX2-falsiX1)/falsiX2)*100;
            if(stoppingDeterminer<=stoppingCriterion&&roots>0){
                rootDisplay(falsiXr);
            }
            double determiner = fXl*fXr;
            if(determiner>0){
                stweng = ">0";
            }else if(determiner<=0){
                stweng = "<0";
            }
            if(iteration < maxIterations){
                dataFalsi.add(createRow2(iteration+1, falsiXl, falsiXu, falsiXr, stoppingDeterminer,fXl, fXu,fXr, stweng));
            }
            falsiX1=falsiX2;
            if(determiner>0){
                falsiXl=falsiXr;
            }else if(determiner<=0){
                falsiXu=falsiXr;
            }
            iteration++;
        }
        for (ArrayList<Object> row : dataFalsi) {
                model.addRow(row.toArray());
        }
        dataFalsi.clear();
`       */
    
     //ExprEvaluator evaluator = new ExprEvaluator();
        // Parse the equation string and differentiate it
        //IExpr expr = evaluator.evaluate(equation);
        //IExpr diffExpr = evaluator.eval("D(" + expr.toString() + "," + "X" + ")");

        //String existingPolynomialString = equation;

        // Parse the existing polynomial equation and extract the coefficients
        //PolynomialFunction existingPolynomial = PolynomialFunction.parse(existingPolynomialString);
        //double[] existingCoefficients = existingPolynomial.getCoefficients();

        // Create a new polynomial with the same degree as the existing polynomial
        //double[] newCoefficients = new double[existingCoefficients.length];
        //newCoefficients[0] = -existingCoefficients[0]; // Change the constant term to its negative
        //for(int z = 1; z < existingCoefficients.length; z++) {
        //    newCoefficients[z] = existingCoefficients[z];
        //}

        // Construct the new polynomial equation as a string
       // StringBuilder newPolynomialBuilder = new StringBuilder();
        //for (int k = 0; k < newCoefficients.length; k++) {
        //    if (newCoefficients[i] != 0) {
        //        if (k > 0) {
        //            newPolynomialBuilder.append(" + ");
        //        }
        //        newPolynomialBuilder.append(newCoefficients[i]);
        //        if (k > 0) {
        //            newPolynomialBuilder.append("x^").append(i);
        //        }
        //    }
        //}
        //String newPolynomialString = newPolynomialBuilder.toString();

        // Construct the final equation by isolating x in the new polynomial equation
        //String newEquation = diffExpr.toString();//derivativeExpr.toString();
        //String ac = newEquation;
        /*
            JOptionPane.showMessageDialog(null, newEquation);
            String equate = newEquation.replace("X", Double.toString(newXi));
            Expression expression6 = new Expression(equate);
            ffXi = expression6.calculate();
            String equate1 = equation.replace("X", Double.toString(newXi));
            Expression expression7 = new Expression(equate1);
            fXi = expression7.calculate();
            newXi = newXi - (fXi/ffXi);
            */
    private void graphicalGraph(String equation, double roots,String start, String end) {
    XYSeries series = new XYSeries("FUNCTION");
    double start1 = Double.parseDouble(start);
    double end1 = Double.parseDouble(end);
    double step = 0.01;
    for (double x = -5.0; x <= 5.0; x += step) {
        String equate = equation.replace("X", Double.toString(x));
        Expression expression = new Expression(equate);
        double y = expression.calculate(); // Evaluating the function at each x value
        // Ensure that y-values are within the range of -10 to 10
        if (y >= -10 && y <= 10) {
            series.add(x, y); // Adding the (x, y) pair to the series if y is within the range
        }
    }
    
    XYSeriesCollection dataset = new XYSeriesCollection();
    dataset.addSeries(series);

    JFreeChart chart = ChartFactory.createXYLineChart("","X","f(X)",dataset);

    chart.setBackgroundPaint(Color.WHITE);

    XYPlot plot = (XYPlot) chart.getPlot();
    plot.setBackgroundPaint(Color.WHITE);
    plot.setDomainGridlinesVisible(true);
    plot.setDomainGridlinePaint(Color.BLACK); // Change gridline color to white
    plot.setRangeGridlinesVisible(true);
    plot.setRangeGridlinePaint(Color.BLACK); // Change gridline color to white

    plot.getRenderer().setSeriesPaint(0, Color.BLUE);

    plot.getDomainAxis().setLabelPaint(Color.BLACK); // Change X-axis label color to white
    plot.getDomainAxis().setTickLabelPaint(Color.BLACK); // Change X-axis tick labels color to white

    plot.getRangeAxis().setLabelPaint(Color.BLACK); // Change Y-axis label color to white
    plot.getRangeAxis().setTickLabelPaint(Color.BLACK); // Change Y-axis tick labels color to white

    // Setting the range for the domain (x-axis)
    plot.getDomainAxis().setRange(start1, end1);

    // Adding ROOT series
    XYSeries rootSeries = new XYSeries("ROOT");
    rootSeries.add(roots, 0); 
    XYSeriesCollection rootDataset = new XYSeriesCollection();
    rootDataset.addSeries(rootSeries);
        plot.setDataset(1, rootDataset);
    plot.mapDatasetToDomainAxis(1, 0);
    plot.mapDatasetToRangeAxis(1, 0);

    XYItemRenderer renderer = new XYLineAndShapeRenderer(false, true);
    renderer.setSeriesPaint(0, Color.RED); 
    plot.setRenderer(1, renderer);

    ChartPanel chartPanel = new ChartPanel(chart);
    chartPanel.setPreferredSize(new Dimension(553, 0));

    jPanel4.setLayout(new BorderLayout());
    jPanel4.removeAll();
    jPanel4.add(chartPanel, BorderLayout.CENTER);
    jPanel4.revalidate();
    jPanel4.repaint();
    }
    
    private void clearLine() {
        switch(tfSwitch){
            case 1 -> {
                displayIteration = "";
                iterations = "";
                iterationField.setText(displayIteration);
            }
            case 2 -> {
                Interval = "";
                graphicalTextField.setText(Interval);
            }
            case 3 -> {
                
                break;
            }
            case 4 -> {
                xChangeIncremental = "";
                xChange.setText(xChangeIncremental);
                break;
            }
            case 5 -> {
                start = "";
                startTextField.setText(start);
                break;
            }
            case 6 -> {
                end = "";
                endTextField.setText(end);
                break;
            }
            default -> {
                equation = "";
                display = "";
                operatorCount = "";
                equationTextField.setText(display);
            }
        }
        
    }
    private void textFieldSwitch(){
        if(tfSwitch==0){
            tfSwitch=1;
            iterations = "";
            displayIteration = "";
            iterationField.setText(this.displayIteration);
        }else{
            tfSwitch=0;
            if(iterations == null){
                iterations = "1000";
            }
        }
    }
    private void equationComp(String num) {
        switch(tfSwitch){
            case 1 -> {
                displayIteration+=num;
                iterations+=num;
                iterationField.setText(this.displayIteration);
            }
            case 2 -> {
                Interval += num ;
                graphicalTextField.setText(Interval);
            }
            case 3 ->{
                
                break;
            }
            case 4 ->{
                xChangeIncremental += num;
                xChange.setText(xChangeIncremental);
                break;
            }
            case 5 -> {
                start += num;
                startTextField.setText(start);
                break;
            }
            case 6 -> {
                end += num;
                endTextField.setText(end);
                break;
            }
            default -> {
                display += num;
                equation += num;
                equationTextField.setText(this.display);
            }   
        }
    }
    private void equationSpecialComp(String num) {
            display += num;
            equation += num;
            equationTextField.setText(this.display);
    }
    private void equationOperator(String num){
        if(tfSwitch==0){
            if(display.substring(display.length() - 1).equals("*") || display.substring(display.length() - 1).equals("/") || display.substring(display.length() - 1).equals(".")){
                return;
            }else{
                operatorCount+= num;
                display += num;
                equation += num;
            }
            equationTextField.setText(this.display);
        }else if(tfSwitch == 2){
            if(num == "."){
                Interval += num;
                graphicalTextField.setText(Interval);
            }
        }else if(tfSwitch == 3){
            if(num == "."){
                
            }
        }else if(tfSwitch == 4){
            if(num == "."){
                xChangeIncremental += num;
                xChange.setText(xChangeIncremental);
            }
        }else if(tfSwitch == 5){
            if(num == "." || num =="-"){
                start += num;
                startTextField.setText(start);
            }
        }else if(tfSwitch == 6){
            if(num == "." || num=="-"){
                end += num;
                endTextField.setText(end);
            }
        }
    }
    private void deleteFunc() {
        switch(tfSwitch){
            case 1 -> {
                String del = iterations;
                del = del.substring(0, del.length() - 1);
                iterations = del;
                displayIteration = del;
                iterationField.setText(displayIteration);
            }
            case 2 -> {
                String del2 = Interval;
                del2 = del2.substring(0, del2.length() - 1);
                Interval = del2;
                graphicalTextField.setText(Interval);
            }
            case 3 ->{
                break;
            }
            case 4 ->{
                String del4 = xChangeIncremental;
                del4 = del4.substring(0, del4.length() - 1);
                xChangeIncremental = del4;
                xChange.setText(xChangeIncremental);
                break;
            }
            case 5 ->{
                String del4 = start;
                del4 = del4.substring(0, del4.length() - 1);
                start = del4;
                startTextField.setText(start);
                break;
            }
            case 6 ->{
                String del4 = end;
                del4 = del4.substring(0, del4.length() - 1);
                end = del4;
                endTextField.setText(end);
                break;
            }
            default -> {
                if(display.substring(display.length() - 1).equals("^") || display.substring(display.length() - 1).equals("*") || display.substring(display.length() - 1).equals("/") || display.substring(display.length() - 1).equals("+") || display.substring(display.length() - 1).equals("-") ){
                    String del1 = equation;
                    del1 = del1.substring(0, del1.length() - 1);
                    operatorCount = operatorCount.substring(0, operatorCount.length() - 1);
                    equation = del1;
                    display = del1;
                }else{
                    String del1 = equation;
                    del1 = del1.substring(0, del1.length() - 1);
                    equation = del1;
                    display = del1;
                }
                equationTextField.setText(display);
            }   
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Calculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Calculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Calculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Calculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Calculator().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.mycompany.numericalmethod.Button bisectionButton;
    private javax.swing.JTable bisectionTable;
    private javax.swing.JTabbedPane displayTab;
    private javax.swing.JTextField endTextField;
    private javax.swing.JTextField equationTextField;
    private com.mycompany.numericalmethod.Button falsiButton;
    private com.mycompany.numericalmethod.PanelRound falsiTab;
    private javax.swing.JTable falsiTable;
    private com.mycompany.numericalmethod.Button fixedButton;
    private javax.swing.JTable fixedPointTable;
    private com.mycompany.numericalmethod.Button graphicalButton;
    private javax.swing.JTable graphicalTable;
    private javax.swing.JTextField graphicalTextField;
    private com.mycompany.numericalmethod.Button incrementalButton;
    private javax.swing.JTable incrementalTable;
    private javax.swing.JTextField iterationField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JTable newtonRhapsonTable;
    private com.mycompany.numericalmethod.Button numButton;
    private com.mycompany.numericalmethod.Button numButton1;
    private com.mycompany.numericalmethod.Button numButton10;
    private com.mycompany.numericalmethod.Button numButton11;
    private com.mycompany.numericalmethod.Button numButton12;
    private com.mycompany.numericalmethod.Button numButton13;
    private com.mycompany.numericalmethod.Button numButton14;
    private com.mycompany.numericalmethod.Button numButton15;
    private com.mycompany.numericalmethod.Button numButton16;
    private com.mycompany.numericalmethod.Button numButton17;
    private com.mycompany.numericalmethod.Button numButton18;
    private com.mycompany.numericalmethod.Button numButton19;
    private com.mycompany.numericalmethod.Button numButton2;
    private com.mycompany.numericalmethod.Button numButton20;
    private com.mycompany.numericalmethod.Button numButton21;
    private com.mycompany.numericalmethod.Button numButton22;
    private com.mycompany.numericalmethod.Button numButton23;
    private com.mycompany.numericalmethod.Button numButton24;
    private com.mycompany.numericalmethod.Button numButton25;
    private com.mycompany.numericalmethod.Button numButton26;
    private com.mycompany.numericalmethod.Button numButton27;
    private com.mycompany.numericalmethod.Button numButton28;
    private com.mycompany.numericalmethod.Button numButton29;
    private com.mycompany.numericalmethod.Button numButton3;
    private com.mycompany.numericalmethod.Button numButton30;
    private com.mycompany.numericalmethod.Button numButton31;
    private com.mycompany.numericalmethod.Button numButton32;
    private com.mycompany.numericalmethod.Button numButton33;
    private com.mycompany.numericalmethod.Button numButton34;
    private com.mycompany.numericalmethod.Button numButton35;
    private com.mycompany.numericalmethod.Button numButton4;
    private com.mycompany.numericalmethod.Button numButton5;
    private com.mycompany.numericalmethod.Button numButton6;
    private com.mycompany.numericalmethod.Button numButton7;
    private com.mycompany.numericalmethod.Button numButton8;
    private com.mycompany.numericalmethod.Button numButton9;
    private com.mycompany.numericalmethod.PanelRound panelRound1;
    private com.mycompany.numericalmethod.PanelRound panelRound2;
    private com.mycompany.numericalmethod.PanelRound panelRound3;
    private com.mycompany.numericalmethod.PanelRound panelRound4;
    private com.mycompany.numericalmethod.PanelRound panelRound5;
    private com.mycompany.numericalmethod.PanelRound panelRound7;
    private com.mycompany.numericalmethod.Button rhapsonButton;
    private com.mycompany.numericalmethod.PanelRound rhapsonTab;
    private javax.swing.JTextField rootCountField;
    private javax.swing.JTextField rootDisplay;
    private com.mycompany.numericalmethod.PanelRound rootHolder;
    private com.mycompany.numericalmethod.Button secantButton;
    private com.mycompany.numericalmethod.PanelRound secantTab;
    private javax.swing.JTable secantTable;
    private javax.swing.JTextField startTextField;
    private javax.swing.JTextField xChange;
    // End of variables declaration//GEN-END:variables
}
